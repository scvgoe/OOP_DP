개발자가 반드시 정복해야 할 객체지향과 디자인 패턴

Chapter 02 객체 지향
1. 절차 지향과 객체 지향
1.1 절차 지향
소프트웨어를 구현한다는 것은 결국 소프트웨어를 구성하는 데이터와 데이터를
조작하는 코드를 작성하는 것. 이렇게 데이터를 조작하는 코드를 프로시져나 함수의
형태로 분리하여, 프로시져로 프로그램을 구성하는 기법을 절차 지향 (Procedural
Oriented) 프로그래밍이라 한다.

* 절차 지향이라는 말 때문에 뭔가 순서에 따라 프로그래밍하는 방식을 생각할 수
* 있으나 단순히 프로시져라는 말을 번역하면서 생겨난 말

다수의 프로시저들이 데이터를 공유하는 방식으로 만들어지기 때문에, 절차 지향
프로그램은 자연스럽게 데이터를 중심으로 구현하게 된다.

최초에는 절차 지향적으로 코드를 구현하기 쉽지만 프로그램의 규모가 커져서 데이터
종류가 증가하고 이를 사용하는 프로시져 또한 증가하면 다음의 문제들이 발생할 수
있다.
- 데이터 타입이나 의미를 변경해야 할 때, 함께 수정해야 하는 프로시저가 증가
- 같은 데이터를 프로시저들이 서로 다른 의미로 사용하는 경우가 발생

1.2 객체 지향
데이터와 관련된 프로시져를 객체라는 단위로 묶는다.
프로그램의 규모가 작을 때에는 절차 지향보다 더 복잡한 구조를 갖게 된다.


2. 객체
2.1 객체의 핵심은 기능을 제공하는 것

2.2 인터페이스와 클래스
객체가 제공하는 기능을 오퍼레이션(operation)이라고 부른다.
오퍼레이션의 사용법은 아래의 세 가지로 구분되며, 이를 합쳐 시그니처
(signature)라고 부른다.
- 기능 식별 이름
- 파라미터 및 파라미터 타입
- 기능 실행 결과 값

객체가 제공하는 모든 오퍼레이션 집합을 객체의 인터페이스(interface)라고 부르며
서로 다른 인터페이스를 구분할 때 사용되는 명칭이 바로 타입(type)이다.
* 여기서 말하는 인터페이스는 자바 언어나 C# 언어에 포함되어 있는 인터페이스가
* 아니라, 객체 지향에서 오퍼레이션 집합을 표현할 때 사용되는 용어

인터페이스는 객체가 제공하는 기능에 대한 명세서일 뿐, 실제 객체가 기능을 어떻게
구현하는지에 대한 내용은 포함하고 있지 않다. 실제 객체의 구현을 정의하는 것은
클래스(class)이다.

2.3 메시지
어떤 객체에 오퍼레이션의 실행을 요청하는 것을 '메시지를 보낸다'라고 표현한다.
자바와 같은 언어에서 메서드를 호출하는 것이 메시지를 보내는 과정에 해당한다.


3. 객체의 책임과 크기
객체가 갖는 책임을 결정하는 것이 객체 지향 설계의 출발점이다. 프로그램을
작성하기에 앞서 프로그램이 필요로 하는 기능들의 목록을 작성해야 한다. 이
기능들을 객체들에게 어떻게 분배하느냐에 따라 객체의 구성이 달라진다. 모든
상황에 들어맞는 객체-책임 구성 규칙이 존재하는 것은 아니지만, 한 가지 확실한
규칙은 객체가 갖는 책임의 크기는 작을수록 좋다는 것이다. 즉, 객체가 제공하는
기능의 개수가 작아야 한다는 것을 의미한다.
* 한 객체에 기능이 많아지면 절차 지향적인 구조를 갖게 된다.

객체가 갖는 책임의 크기가 작아질수록 객체 지향의 장점인 변경의 유연함을 얻을 수
있다. 객체의 크기와 관련된 원칙이 있는데 바로 단일 책임 원칙(Single
Responsibility Principle: SRP)이다.

단일 책임 원칙에 대한 내용은 '5장 설계원칙: SOLID' 에서 자세히 살펴본다.
* 객체의 역할 = 객체의 책임

4. 의존
한 객체가 다른 객체를 이용하여 완성된다면, 이는 의존 관계에 있다고 말할 수
있다. 변경은 의존 관계를 따라 전이되기 때문에, (A <- B <- C <- A) 와 같은 순환
의존이 발생하지 않도록 의존 역전 원칙 (Dependency inversion principle: DIP)를
잘 지킬 수 있어야 한다.

4.1 의존의 양면성
- 내가 변경되면 나에게 의존하고 있는 코드에 영향을 준다.
- 나의 요구가 변경되면 내가 의존하고 있는 타입에 영향을 준다.


